"""Simple wrapper around Google's Gemini text generation API."""

# SPDX-License-Identifier: GPL-3.0-or-later

from __future__ import annotations

import os
import sys

from dotenv import load_dotenv
import google.generativeai as genai


load_dotenv()

# Retrieve the API key from the environment
API_KEY = os.environ.get("GEMINI_API_KEY")
if not API_KEY:
    raise ValueError(
        "GEMINI_API_KEY environment variable not set. Please set it to your Gemini API key."
    )

# Configure the SDK with the API key
genai.configure(api_key=API_KEY)


def generate(prompt: str, model: str = "gemini-2.5-flash") -> str:
    """Return text generated by the specified Google model for ``prompt``."""
    model_client = genai.GenerativeModel(model)
    response = model_client.generate_content(prompt)
    return response.text


def main() -> None:
    """Read a prompt from stdin and print the model's response."""
    if sys.stdin.isatty():
        prompt = input("Enter a prompt: ")
    else:
        prompt = sys.stdin.read().strip()
    try:
        print(generate(prompt))
    except Exception as exc:  # pragma: no cover - network/auth failures
        print(f"Request failed: {exc}")


if __name__ == "__main__":
    main()
